<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Principia</title><link>/</link><description>Recent content in Introduction on Principia</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>ABD Algorithm</title><link>/docs/abd/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>/docs/abd/</guid><description>Write # Get phase: vt-set = read vt pairs from majority of storage nodes select unique t such that t &amp;gt; max(t in vt-set)
Set phase: write_request(v, t) on storage nodes storage nodes store vt only if t &amp;gt; their stored t storage nodes send ACK when majority ACKs are received return OK
Read # Get phase vt-set = read vt pairs from majority of storage nodes select vt such that t = max(t in vt-set)</description></item><item><title>Model Checker in Go</title><link>/docs/model-checker/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>/docs/model-checker/</guid><description>Temporal logic # More than 2000 years ago, Greek philocersor Aristotle, as the first man ever systematically studied logic, has already raised concers about how time (futures in particular) plays a complex role in logical reasoning in his book On Interpretation. Since then, very little was developed for millennia. It was until 1947, a formalization of temporal functions was created by Polish mathematician Jerzy Los. Ever since 1950s, lots of theoretical works has been developed in this area.</description></item><item><title>Topology Mapping Algorithm</title><link>/docs/topology-mapping/</link><pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate><guid>/docs/topology-mapping/</guid><description>ICS 2011
Formalization of the Problem # Network is modeled by a weighted graph $H=(V_H, \omega_H, R_H)$ where $V_H$ is set of vertices/nodes $\omega_H(u, v) \in \mathbb{R}$ are the weighted edges with $u, v \in V_H$ $R_H(u, v)$ is the routing function as a probability distribution of on the set of simple paths $P(u, v)$ between vertices $u$ and $v$.
A static application graph is modeled as weighted graph $A=(V_A, \omega_A)$</description></item><item><title>Neural Network</title><link>/docs/neural-network/</link><pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate><guid>/docs/neural-network/</guid><description>Multilayer Perceptrons # The model of each neuron in the network includes a nonlinear activation function that is differentiable. Let $T = {x(n), t(n)}_{n=1}^N$ denote the training sample. Let $y_i(n)$ denote the function signal produced by output neuron $j$. The error signal produced at neuron $j$ is defined by
$$ \begin{aligned} e_j(n) &amp;amp;= d_j(n) - y_j(n)\\ &amp;amp;= t_j(n) - y_j(n) \end{aligned} $$
The instantaneous error energy of neuron $j$ is defined by $E_j(n) = e_j^2(n)/2$.</description></item><item><title>Distributed Transactions</title><link>/docs/transaction/</link><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid>/docs/transaction/</guid><description>Occult (Observable causal consistency using lossy timestamps) # Observable causal consistency definition:
Alice write(a=1) -&amp;gt; |Shard A| --x--&amp;gt; |Shard A&amp;#39;| Bob read(a)=1 &amp;lt;- |Shard A| write(b=2) -&amp;gt; |Shard B| -----&amp;gt; |Shard B&amp;#39;| -&amp;gt; read(b) waits for read(a) All existing causally consistent systems are susceptible to slowdown cascades.
Solution: timestamp like vector clocks Write path: Client library attaches its causal timestamp to every write and sends it to the master of the corresponding shard.</description></item><item><title>WanKeeper: Efficient Distributed Coordination at WAN-scale</title><link>/docs/wankeeper/</link><pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate><guid>/docs/wankeeper/</guid><description>In recent years, there have been more systems to distribute data at global scale, especially so given the rise of the NewSQL systems like Google Spanner 1, CockroachDB and Microsoft Cosmos DB. While providing the same scalable performance of NoSQL systems, they still maintain strong consistency guarantees by relying upon some forms of wide area network (WAN) coordination service. Among them, ZooKeeper 2 is the most popular coordination service used in many projects in Facebook and Apache.</description></item><item><title>Paxos Reconfiguration</title><link>/docs/paxos_reconfiguration/</link><pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate><guid>/docs/paxos_reconfiguration/</guid><description>Introduction # There have been several approaches to dynamic reconfiguration of consensus algorithms. Dynamic Paxos (Multi-Paxos that supports reconfig) limits the number of concurrent proposals as a pipeline length parameter $\alpha &amp;gt; 0$, therefore a configuration change chosen at instance $i$ does not take effect until instance $i + \alpha$. Raft protocol supports unbounded pipeline by limiting reconfiguration operations to be only add or remove one node at a time.</description></item><item><title>What Paxos sounds like</title><link>/docs/sonification/</link><pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate><guid>/docs/sonification/</guid><description>Sonification is the use of non-speech audio to convey information or perceptualize data. Auditory perception has advantages in temporal, spatial, amplitude, and frequency resolution that open possibilities as an alternative or complement to visualization techniques. &amp;ndash; Wikipedia
Following simple rules, to assign different audio frequencies to meaningful events or state changes in a computer program, we were able to clearly hear the &amp;ldquo;characteristic&amp;rdquo; and pattern that distinguish them, like the sorting algorithms in this video.</description></item><item><title>Compressive Sensing</title><link>/docs/compressive_sensing/</link><pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate><guid>/docs/compressive_sensing/</guid><description>Introduction # This survey is inspired by a seminar on the topic of crowd sensing systems. In which I have been exposed to the celebrated theory of compressive sensing, also known as compressive sampling or CS, a novel sensing paradigm that can help reduce the sampling rate of sensing tasks. Sampling is data acquisition protocol that aims to recover the original signal of interest. Such signals includes audio, medical images, radio, computer visions, etc.</description></item><item><title>TLA+ wiki</title><link>/docs/tla+/</link><pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate><guid>/docs/tla+/</guid><description>Modules # Integers Naturals Reals Sequences TLC &amp;ndash; print Bags are multi-set functions, each element points to an integer as its quntity. Defines operators: (+) (-) FiniteSets defines IsFiniteSet(S) and Cardinality(S). RealTime &amp;ndash; RTBound RTnow now Definition # &amp;lt;A&amp;gt;_v == A /\ (v&amp;#39; # v) $$\langle A \rangle_v == A \land (v&amp;rsquo; \neq v)$$
[A]_v == A \/ (v&amp;#39; = v) $$[A]_v == A \lor (v&amp;rsquo;=v)$$
Operators # Divides (p, n) == $\exists q \in Int : n = q * p$</description></item></channel></rss>